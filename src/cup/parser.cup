/*
   scopo analizzare e dire se corrisponde ad una semplice espressione con parentesi (eventuali precedenze)
*/

package cup.example;
import java_cup.runtime.*;
import cup.example.Lexer;
import cup.example.utilities.*;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  	protected Lexer lexer;
  	protected SymbolTable symbolTable;
  	private StringBuffer log;
  	private final String nomefile = "cup6.txt";    //nome file da analizzare
:}

/*
    come utilizzare il file sorgente
    stessa cosa che facevo nello scanner
*/
init with {:

  	ComplexSymbolFactory f = new ComplexSymbolFactory();
  	FileInputStream fis = null;
	File file = new File(nomefile);

  	try {
    	fis = new FileInputStream(file);
  	} catch (IOException e) {
    	e.printStackTrace();
  	}
 
  	symbolFactory = f;
  	lexer = new Lexer(f, fis);
  	symbolTable = new SymbolTable();
  	log = new StringBuffer();
:};

scan with {: return lexer.next_token(); :};

/*
    serve per dichiarare metodi da utilizzare
*/
action code {:
    private boolean tipoCopatibileOperatori(TypeDescriptor t1, TypeDescriptor t2) {
        if(t1 == TypeDescriptor.ERROR || t2 != TypeDescriptor.ERROR)
        return false;
        return !(t1 == TypeDescriptor.INT && t2 == TypeDescriptor.FLOAT);
    }

	private TypeDescriptor tipoOperazione(TypeDescriptor t1, TypeDescriptor t2) {
		if (t1 == TypeDescriptor.ERROR || t2 == TypeDescriptor.ERROR) {
			return TypeDescriptor.ERROR;
		}
		(t1 == TypeDescriptor.FLOAT || t2 == TypeDescriptor.FLOAT)? return TypeDescriptor.FLOAT : return TypeDescriptor.INT;
	}


	private TypeDescriptor testNonDichiarato(String production, String id) {
		Attributes attr = symbolTable.lookup(id);
		if (attr == null) {
			log.append(id + " non dichiarato ; ");
			return TypeDescriptor.ERROR;
		}
        return attr.getTD();
	}

	private TypeDescriptor testGiaDichiarato(TypeDescriptor type, String id) {
		if (symbolTable.lookup(id) != null) {
	    	log.append(id + " gia dichiarato ; ");
			return TypeDescriptor.ERROR;
	    }
        symbolTable.enter(id, new Attributes(type));
        return type;
	}

:};

/*
qua sono definite:
    # token del linguaggio
        terminali e non
    # precedenze
        come comportarsi di default (vedi slide per ricordarti LARL) Quello scritto dopo ha prioritÃ  maggiore
    # regole della grammatica
*/
terminal            PLUS, MINUS, TIMES, DIVIDE, ASSIGN, INT, FLOAT, PRINT;
terminal String		INUM, FNUM, ID;
non terminal TypeDescriptor 	Prog, DSs, Dcl, Stm, Expr, Op, Val;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;

Prog ::= DSs:d
{:
    (d == TypeDescriptor.ERROR)?
        System.out.println("Errori: " + log.toString() : System.out.println("Corretto");
    RESULT = d;
:};

DSs ::= Dcl:dc DSs:ds {: RESULT = tipoOperazione(dc, ds); :}
    | Stm:s DSs:ds {: RESULT = tipoOperazione(s, ds); :}
    | // epsilon
    ;

Dcl ::= FLOAT ID:i {: RESULT = testGiaDichiarato(TypeDescriptor.FLOAT, i); :}
    | CONV ID:i {: RESULT = testGiaDichiarato(TypeDescriptor.CONV, i); :}
    | INT ID:i {: RESULT = testGiaDichiarato(TypeDescriptor.INT, i); :}
    ;

Stm ::= ID:i ASSIGN Expr:e
{:
    Attributes attr = symbolTable.lookup(i);
    if (attr == null) {
       log.append("manca dichiarazione ; ");
       RESULT = TypeDescriptor.ERROR;
    } else {
        TypeDescriptor td = attr.getTD();
        if (!tipoCopatibileOperatori(td, e)) {
            log.append("assegnamento non valido ; ");
            RESULT = TypeDescriptor.ERROR;
        }
        RESULT = td;
    }
:}
    | PRINT ID:i {: RESULT = testNonDichiarato("[Stm -> PRINT ID]", i); :};
      
Expr ::= Expr:e1 Op Expr:e2
{:
    TypeDescriptor td = ;
    if (tipoOperazione(e1, e2) == TypeDescriptor.ERROR) {
        log.append("operazione non consentita ; ");
    }
    RESULT = td;
:}
    | Val:v {: RESULT = v; :};
	  
Op ::= PLUS | MINUS | TIMES | DIVIDE;

Val ::= INUM {: RESULT = TypeDescriptor.INT; :}
    | FNUM {: RESULT = TypeDescriptor.FLOAT; :}
    | CONV {: RESULT = TypeDescriptor.FLOAT; :}
    | ID:i {: RESULT = testNonDichiarato("[Val -> ID]", i); :};
